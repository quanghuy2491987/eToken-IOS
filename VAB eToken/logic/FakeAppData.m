/* -----------------------------------------------------------------------------
 *
 *     Copyright (c)  2013  -  GEMALTO DEVELOPEMENT - R&D
 *
 * -----------------------------------------------------------------------------
 * GEMALTO MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. GEMALTO SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 *
 * THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
 * CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
 * PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
 * NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
 * SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
 * SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
 * PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). GEMALTO
 * SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
 * HIGH RISK ACTIVITIES.
 *
 * -----------------------------------------------------------------------------
 */

#import "FakeAppData.h"

@implementation FakeAppData

+ (NSString *)PIN_DIFFERENT {
    return @"different";
}
+ (NSString *)PIN_SUCCESS {
    return @"success";
}

+ (NSString *)PROVISION_KEY {
    return @"provisioning_key_store";
}
+ (NSString *)PIN_KEY {
    return @"pin_key_store";
}

/**
 * Replace this URL with your EPS URL.
 */
+(NSURL *)epsUrl
{
    //return [NSURL URLWithString:@"http://192.168.31.152:8181/provisioner/domains/vietabank_retail/provision"];
    return [NSURL URLWithString:@"https://etoken.vietabank.com.vn:8181/provisioner/domains/vietabank_retail/provision"];
}

/**
 * Replace this string with your own EPS key ID.
 *
 * This is specific to the configuration of the bank's system. Therefore
 * other values should be used here.
 */
+(NSString *)rsaKeyId
{
    return @"C717B2834FA9C98763DABA5E85856F97A3CEA3C2";
}

/**
 * Replace this byte array with your own EPS key modulus.
 *
 * The EPS' RSA modulus. This is specific to the configuration of the
 * bank's system.  Therefore other values should be used here.
 */
+(NSData *)rsaKeyModulus
{
    // Security Guideline: GEN13. Integrity of public keys
    // Since this example hard codes the key and does not load it from a
    // file, this guideline is skipped.
    
    // Security Guideline: GEN17. RSA key length
    // 2048 bit key
    unsigned char rawRsa[] = {
        0x00, 0xaf, 0x84, 0xfe, 0x80, 0x65, 0xe3, 0xa7, 0x66, 0x09, 0x5f, 0x34, 0x71, 0x7d, 0x3c,
        0x1d, 0xd0, 0xb2, 0x25, 0xc2, 0xe7, 0x03, 0xfe, 0x02, 0x0f, 0x1b, 0xba, 0xa6, 0x44, 0x9a,
        0x72, 0xaa, 0x8d, 0xe1, 0x6d, 0x28, 0xdd, 0x18, 0xdf, 0xe4, 0xef, 0xd1, 0xf8, 0x32, 0xae,
        0x52, 0xa1, 0x26, 0xc3, 0xd2, 0x52, 0xab, 0x99, 0x71, 0x4f, 0xca, 0xd9, 0x94, 0x80, 0x97,
        0x12, 0x65, 0xe0, 0x0d, 0x7d, 0x84, 0x33, 0xc0, 0x78, 0x0c, 0x7a, 0x67, 0x6e, 0x29, 0xb4,
        0xd1, 0xbb, 0xc3, 0x54, 0x79, 0x89, 0x10, 0x45, 0x4f, 0xc6, 0x5f, 0x54, 0x71, 0x59, 0x27,
        0x8b, 0x7d, 0xa2, 0x37, 0xb8, 0xb6, 0xb8, 0x18, 0xe8, 0x63, 0x76, 0xd5, 0x43, 0x20, 0xa0,
        0x46, 0x0d, 0x68, 0x7e, 0xfe, 0x0e, 0xb8, 0x14, 0x32, 0x9a, 0xc1, 0x1f, 0x25, 0x63, 0xbf,
        0x90, 0xc5, 0x76, 0xa6, 0x3f, 0xe9, 0xab, 0x8e, 0x64, 0x24, 0x49, 0x93, 0x60, 0x8a, 0x6d,
        0x57, 0x34, 0xc0, 0xb3, 0x9a, 0x38, 0x9e, 0xe1, 0xb8, 0x7b, 0x90, 0x56, 0x6e, 0xf2, 0x20,
        0xe4, 0x75, 0xa4, 0x8a, 0x33, 0xbb, 0xf8, 0x52, 0x2d, 0x95, 0xcc, 0xe0, 0x3f, 0xa4, 0x40,
        0xe1, 0xc9, 0x83, 0xb7, 0xc0, 0x85, 0x46, 0xe7, 0xf7, 0x04, 0x8b, 0x17, 0x1f, 0x37, 0x3b,
        0x09, 0xb7, 0x97, 0x25, 0x0a, 0x1b, 0xa8, 0xf0, 0xe5, 0xa6, 0xd1, 0xbc, 0x4f, 0x1a, 0xb9,
        0x23, 0x8c, 0x1e, 0x79, 0x97, 0xdc, 0x3a, 0xbc, 0x79, 0x40, 0xdc, 0x91, 0x4d, 0x42, 0x5d,
        0x7a, 0x2c, 0xff, 0x30, 0x6b, 0x49, 0xfa, 0x22, 0x32, 0x4f, 0xdb, 0x74, 0x03, 0x9a, 0x05,
        0xe7, 0x1b, 0xb6, 0x15, 0xc1, 0x73, 0xaf, 0xee, 0x0f, 0x6b, 0xd2, 0xae, 0x8c, 0x9d, 0xe2,
        0x0b, 0xe9, 0x4b, 0x4a, 0x22, 0xc3, 0x1e, 0x62, 0xc2, 0x46, 0xed, 0xaa, 0xb8, 0x98, 0x8b,
        0x71, 0x1f, 0x3b, 0xa4, 0x73, 0x5e, 0xd7, 0x5a, 0x31, 0xaa, 0x00, 0x82, 0xc6, 0x48, 0x9d,
        0x7d, 0xac, 0x81, 0x72, 0x4a, 0x7f, 0xa0, 0x03, 0x8c, 0x7d, 0x85, 0x46, 0x32, 0x52, 0x15,
        0xf3, 0x15, 0x00, 0x5e, 0x72, 0x94, 0xfe, 0x97, 0xf7, 0xd1, 0xd9, 0x81, 0xff, 0xf4, 0x1c,
        0xac, 0xa4, 0x6d, 0xe5, 0x0a, 0x25, 0x0e, 0xa8, 0x3b, 0x73, 0x41, 0x6a, 0x1e, 0x58, 0x9e,
        0x26, 0xb8, 0xbc, 0x2c, 0xe9, 0xb0, 0x39, 0x56, 0xc1, 0xb6, 0x23, 0x75, 0x7d, 0xcd, 0x8a,
        0x23, 0x17, 0xd8, 0x79, 0xc7, 0x8c, 0xbf, 0x6a, 0x1e, 0xd0, 0x27, 0x5a, 0xd0, 0xb6, 0x0d,
        0x61, 0x4e, 0xdf, 0xdc, 0x98, 0x4d, 0x18, 0xc9, 0x9e, 0xd5, 0xc5, 0xe0, 0x65, 0x06, 0x07,
        0x04, 0x51, 0x85, 0x30, 0x89, 0x88, 0xd2, 0x9e, 0xfc, 0x38, 0x3e, 0x01, 0xb2, 0xc1, 0x96,
        0xae, 0x2f, 0x65, 0x5a, 0xab, 0xab, 0x88, 0x0b, 0x05, 0x6f
    };
    
    return [NSData dataWithBytes:rawRsa length:sizeof(rawRsa)];
}

/**
 * Replace this byte array with your own EPS key exponent.
 *
 * The EPS' RSA exponent. This is specific to the configuration of the
 * bank's system.  Therefore other values should be used here.
 */
+(NSData *)rsaKeyExponent
{
    // Security Guideline: GEN13. Integrity of public keys
    // Since this example hard codes the key and does not load it from a
    // file, this guideline is skipped.
    unsigned char raw[] = { 0x01, 0x00, 0x01 };
    return [NSData dataWithBytes:raw length:sizeof(raw)];
}

/**
 * The custom fingerprint data that seals all the token credentials in this
 * example.
 *
 * This data does not need to be modified in order to use this example app.
 */
+(NSData *)customFingerprintData
{
    // This example simply uses the bundle identifier.
    //
    // This is one example of possible data that can be used for the custom
    // data. It provides domain separation so that the data stored by the
    // Ezio Mobile SDK is different for this application than it would be
    // for another bank's application. More data can be appended to
    // further improve the fingerprinting.
    return [@"pqh.pliz.vn.etoken" dataUsingEncoding:NSUTF8StringEncoding];
}

/**
 * Replace this byte array with activation code.
 *
 * The VIC feature activation code.
 */
+ (NSData *)activationVicEnabledSecurePinpadDisabled
{
    unsigned char raw[] = { 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01,
        0x01};
    
    return [NSData dataWithBytes:raw length:sizeof(raw)];
}

+ (NSData*) activationAllEnabled {
    
    unsigned char raw[] = {
        0x01, 0x56, 0x49, 0x45, 0x54, 0x41, 0x42, 0x30, 0x31, 0x00, 0x00, 0x00, 0x02,
        0x06, 0xb4, 0x3f, 0x7b, 0xf7, 0xd6, 0x56, 0x16, 0x3d, 0x29, 0x0c, 0x08, 0xaf,
        0xbc, 0x2f, 0x38, 0x2d, 0x46, 0xe4, 0xdf, 0x69, 0x15, 0x52, 0x06, 0x3d, 0xbf,
        0xa8, 0x8b, 0x62, 0x2e, 0x6b, 0x67, 0x24, 0x9f, 0xe1, 0x78, 0x87, 0x9b, 0xd1,
        0x66, 0x15, 0x90, 0x41, 0x3e, 0x02, 0x03, 0xf2, 0xd9, 0xee, 0xb8, 0x4b, 0xdd,
        0x35, 0x80, 0xbb, 0x29, 0xb1, 0x58, 0x79, 0xc3, 0x62, 0x8a, 0xe5, 0x20
    };
    return [NSData dataWithBytes:raw length:sizeof(raw)];
}

+(NSString *)CFG_DOMAIN {
    return @"vietabank_retail";
}

+ (NSString *)CFG_TLS_CONFIGURATION {
    return [[EMTlsConfiguration alloc] initWithInsecureConnectionAllowed:NO
      selfSignedCertAllowed:NO
    hostnameMismatchAllowed:NO];
}

+ (id<EMSecureString>)CFG_OCRA_SUITE {
    return [[[EMCore sharedInstance] secureContainerFactory] secureStringFromString:@"OCRA-1:HOTP-SHA256-6:QH64-T30S"];
}
@end
